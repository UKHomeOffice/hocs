version: "2.4" # v3 doesn't support depends_on condition

services:
  postgres:
    image: postgres:9.6
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
    restart: always
    ports:
      - 5432:5432
    networks:
      - hocs-network
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: dev
    volumes:
      - ./db_setup:/docker-entrypoint-initdb.d
    tmpfs:
      - /var/lib/postgresql

  clamav:
    # Use a mockserver instead of bloated clamav
    image: mockserver/mockserver:mockserver-5.11.1
    command: -logLevel INFO -serverPort 8080
    ports:
      - 8086:8080
    networks:
      - hocs-network
    environment:
      MOCKSERVER_PROPERTY_FILE: /config/mockserver.json
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/mockserver.json
    volumes:
      - ${PWD}/clamav_mock:/config

  keycloak:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/auth"]
      start_period: 1m
    image: jboss/keycloak:5.0.0
    restart: always
    ports:
      - 9990:9990
      - 9081:8080
    networks:
      - hocs-network
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: password1
      KEYCLOAK_IMPORT: /tmp/local-realm.json
      DB_VENDOR: h2
    volumes:
      - ${PWD}/keycloak:/tmp

  localstack:
    healthcheck:
      test: "bash -c 'AWS_ACCESS_KEY_ID=fake AWS_SECRET_ACCESS_KEY=fake aws --endpoint-url=http://localhost:4572 s3 ls'"
      start_period: 1m
      timeout: 30s
      retries: 3
    image: localstack/localstack:0.9.5
    ports:
      - 9000:8080
      - 4572:4572
      - 4576:4576
      - 4575:4575
      - 4571:4571
      - 4578:4578
    networks:
      - hocs-network
    environment:
      HOSTNAME_EXTERNAL: localstack
      DEFAULT_REGION: eu-west-2
      SERVICES: sqs,sns,es,s3

  aws_cli:
    healthcheck:
      test: "bash -c 'AWS_ACCESS_KEY_ID=fake AWS_SECRET_ACCESS_KEY=fake aws --endpoint-url=http://localstack:4572 s3 ls s3://trusted-bucket'"
      start_period: 1m
      timeout: 10s
      retries: 3
    image: xueshanf/awscli
    # The sleep 8h at the end of this command is to keep aws_cli running. Without it, this step can get run multiple times.
    command:
      - /bin/sh
      - -c
      - |
        aws --version
        aws --endpoint-url=http://localstack:4576 sqs create-queue --queue-name document-queue
        aws --endpoint-url=http://localstack:4576 sqs create-queue --queue-name document-queue-dlq
        aws --endpoint-url=http://localstack:4576 sqs create-queue --queue-name audit-queue
        aws --endpoint-url=http://localstack:4576 sqs create-queue --queue-name audit-queue-dlq
        aws --endpoint-url=http://localstack:4576 sqs create-queue --queue-name search-queue
        aws --endpoint-url=http://localstack:4576 sqs create-queue --queue-name search-queue-dlq
        aws --endpoint-url=http://localstack:4576 sqs create-queue --queue-name notify-queue
        aws --endpoint-url=http://localstack:4576 sqs create-queue --queue-name notify-queue-dlq
        aws --endpoint-url=http://localstack:4575 sns create-topic --name hocs-audit-topic
        aws --endpoint-url=http://localstack:4575 sns subscribe --topic-arn arn:aws:sns:eu-west-2:123456789012:hocs-audit-topic --attributes RawMessageDelivery=true --protocol sqs --notification-endpoint arn:aws:sns:eu-west-2:123456789012:audit-queue
        aws --endpoint-url=http://localstack:4575 sns subscribe --topic-arn arn:aws:sns:eu-west-2:123456789012:hocs-audit-topic --attributes RawMessageDelivery=true --protocol sqs --notification-endpoint arn:aws:sns:eu-west-2:123456789012:search-queue
        aws --endpoint-url=http://localstack:4575 sns set-subscription-attributes --subscription-arn $$(aws --endpoint-url=http://localstack:4575 sns list-subscriptions-by-topic --topic-arn arn:aws:sns:eu-west-2:123456789012:hocs-audit-topic --output json | jq --raw-output '.Subscriptions[0].SubscriptionArn') --attribute-name RawMessageDelivery --attribute-value true
        aws --endpoint-url=http://localstack:4575 sns set-subscription-attributes --subscription-arn $$(aws --endpoint-url=http://localstack:4575 sns list-subscriptions-by-topic --topic-arn arn:aws:sns:eu-west-2:123456789012:hocs-audit-topic --output json | jq --raw-output '.Subscriptions[1].SubscriptionArn') --attribute-name RawMessageDelivery --attribute-value true
        aws --endpoint-url=http://localstack:4575 sns list-subscriptions
        aws --endpoint-url=http://localstack:4576 sqs create-queue --queue-name ukvi-complaint-queue
        aws --endpoint-url=http://localstack:4576 sqs create-queue --queue-name ukvi-complaint-queue-dlq
        aws --endpoint-url=http://localstack:4572 s3 mb s3://untrusted-bucket
        aws --endpoint-url=http://localstack:4572 s3 mb s3://trusted-bucket
        sleep 8h
    environment:
      AWS_ACCESS_KEY_ID: UNSET
      AWS_SECRET_ACCESS_KEY: UNSET
      AWS_DEFAULT_REGION: "eu-west-2"
    networks:
      - hocs-network
    depends_on:
      localstack:
        condition: service_healthy

  load_elastic:
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/hocs/${HOCS_DATA_ELASTIC_REPO:-hocs-data-elastic}:${HOCS_DATA_TAG:-latest}
    environment:
      ELASTIC_HOST: localstack
    networks:
      - hocs-network
    depends_on:
      localstack:
        condition: service_healthy

  data_migration:
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/hocs/${HOCS_DATA_REPO:-hocs-data}:${HOCS_DATA_TAG:-latest}
    environment:
      FLYWAY_URL: jdbc:postgresql://postgres:5432/postgres
      FLYWAY_USER: root
      FLYWAY_PASSWORD: dev
    networks:
      - hocs-network
    depends_on:
      postgres:
        condition: service_healthy

  refresh_members:
    image: curlimages/curl:7.76.1
    command: ["http://info:8080/admin/member/refresh"]
    networks:
      - hocs-network
    depends_on:
      info:
        condition: service_healthy

  frontend:
    healthcheck:
      test: ["CMD", "wget", "-qo", "/dev/null", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 3
    image: quay.io/ukhomeofficedigital/hocs-frontend:${FRONTEND_TAG:-latest}
    ports:
      - 8080:8080
    networks:
      - hocs-network
    environment:
      USE_CLIENTSIDE: "true"
      WORKFLOW_SERVICE: http://workflow:8080
      CASEWORK_SERVICE: http://casework:8080
      INFO_SERVICE: http://info:8080
      DOCUMENT_SERVICE: http://documents:8080
      ALLOWED_FILE_EXTENSIONS: "doc,docx,txt,rtf,html,pdf,jpg,jpeg,tif,tiff,png,bmp,gif,xls,xlsx,msg"
      DOCUMENT_BULK_LIMIT: 40
      VALID_DAYS_RANGE: 180
      S3_BUCKET: "untrusted-bucket"
      S3_ENDPOINT: http://localstack:4572
    depends_on:
      workflow:
        condition: service_healthy
      casework:
        condition: service_healthy
      info:
        condition: service_healthy
      documents:
        condition: service_healthy
      localstack:
        condition: service_healthy

  management-ui:
    healthcheck:
      test: ["CMD", "wget", "-qo", "/dev/null", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 3
    image: quay.io/ukhomeofficedigital/hocs-management-ui:${MANAGEMENT_UI_TAG:-latest}
    ports:
      - 8099:8080
    networks:
      - hocs-network
    environment:
      USE_CLIENTSIDE: "true"
      CASEWORK_SERVICE: http://casework:8080
      INFO_SERVICE: http://info:8080
      DOCUMENT_SERVICE: http://documents:8080
      ALLOWED_FILE_EXTENSIONS: "doc,docx,txt,rtf,html,pdf,jpg,jpeg,tif,tiff,png,bmp,gif,xls,xlsx,msg"
      PORT: 8080
    depends_on:
      casework:
        condition: service_healthy
      info:
        condition: service_healthy
      documents:
        condition: service_healthy
      localstack:
        condition: service_healthy
      aws_cli:
        condition: service_healthy

  casework:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      start_period: 2m
      timeout: 30s
      retries: 3
    image: quay.io/ukhomeofficedigital/hocs-casework:${CASEWORK_TAG:-latest}
    ports:
      - 8082:8080
    networks:
      - hocs-network
    environment:
      SPRING_PROFILES_ACTIVE: "development, local"
      SERVER_PORT: 8080
      DB_HOST: "postgres"
      AWS_LOCAL_HOST: "localstack"
      HOCS_INFO_SERVICE: "http://info:8080"
      HOCS_AUDITSERVICE: "http://audit:8080"
      HOCS_SEARCH_SERVICE: "http://search:8080"
      HOCS_DOCUMENT_SERVICE: "http://documents:8080"
      AUDIT_TOPIC_NAME: "hocs-audit-topic"
    depends_on:
      postgres:
        condition: service_healthy
      localstack:
        condition: service_healthy

  workflow:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      start_period: 3m
      timeout: 30s
      retries: 3
    image: quay.io/ukhomeofficedigital/hocs-workflow:${WORKFLOW_TAG:-latest}
    ports:
      - 8091:8080
    networks:
      - hocs-network
    environment:
      JAVA_OPTS: "-Xms1536M -Xmx2G"
      SPRING_PROFILES_ACTIVE: "development, local"
      SERVER_PORT: 8080
      CASE_QUEUE_NAME: "case-queue"
      CASE_QUEUE_DLQ_NAME: "case-queue-dlq"
      DOCS_QUEUE_NAME: "document-queue"
      DOCS_QUEUE_DLQ_NAME: "document-queue-dlq"
      HOCS_URL: "http://localhost:8080"
      HOCS_CASE_SERVICE: "http://casework:8080"
      HOCS_DOCUMENT_SERVICE: "http://documents:8080"
      HOCS_INFO_SERVICE: "http://info:8080"
      DB_HOST: "postgres"
      DB_SCHEMA_NAME: "workflow"
      AWS_LOCAL_HOST: "localstack"
    depends_on:
      postgres:
        condition: service_healthy

  audit:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      start_period: 2m
      timeout: 30s
      retries: 3
    image: quay.io/ukhomeofficedigital/hocs-audit:${AUDIT_TAG:-latest}
    ports:
      - 8087:8080
    networks:
      - hocs-network
    environment:
      SPRING_PROFILES_ACTIVE: "development, local"
      SERVER_PORT: 8080
      DB_HOST: "postgres"
      AUDIT_QUEUE_NAME: "audit-queue"
      AUDIT_QUEUE_DLQ_NAME: "audit-queue-dlq"
      HOCS_INFO_SERVICE: "http://info:8080"
      AWS_LOCAL_HOST: "localstack"
    depends_on:
      postgres:
        condition: service_healthy
      localstack:
        condition: service_healthy

  search:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      start_period: 1m
      timeout: 30s
      retries: 3
    image: quay.io/ukhomeofficedigital/hocs-search:${SEARCH_TAG:-latest}
    ports:
      - 8088:8080
    networks:
      - hocs-network
    environment:
      SPRING_PROFILES_ACTIVE: "development, local, localelastic"
      SERVER_PORT: 8080
      DB_HOST: "postgres"
      SEARCH_QUEUE_NAME: "search-queue"
      SEARCH_QUEUE_DLQ_NAME: "search-queue-dlq"
      AWS_LOCAL_HOST: "localstack"
      ELASTIC_INDEX_PREFIX: "local"
      ELASTICSEARCH_HOST: "localstack"
      ELASTICSEARCH_PORT: "4571"
      ELASTICSEARCH_ACCESS_KEY: "UNSET"
      ELASTICSEARCH_SECRET_KEY: "UNSET"
      AWS_SQS_ACCESS_KEY: "UNSET"
      AWS_SQS_SECRET_KEY: "UNSET"
    depends_on:
      postgres:
        condition: service_healthy
      localstack:
        condition: service_healthy
      aws_cli:
        condition: service_started

  info:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      start_period: 3m
      timeout: 30s
      retries: 3
    image: quay.io/ukhomeofficedigital/hocs-info-service:${INFO_TAG:-latest}
    ports:
      - 8085:8080
    networks:
      - hocs-network
    environment:
      SPRING_PROFILES_ACTIVE: "development, local"
      SERVER_PORT: 8080
      DB_HOST: "postgres"
      CASE_QUEUE_NAME: "case-queue"
      CASE_QUEUE_DLQ_NAME: "case-queue-dlq"
      DOCS_QUEUE_NAME: "document-queue"
      DOCS_QUEUE_DLQ_NAME: "document-queue-dlq"
      HOCS_CASE_SERVICE: "http://casework:8080"
      HOCS_DOCUMENT_SERVICE: "http://documents:8080"
      KEYCLOAK_SERVER_ROOT: "http://keycloak:8080"
      AUDIT_QUEUE_NAME: "audit-queue"
      AUDIT_QUEUE_DLQ_NAME: "audit-queue-dlq"
      HOCS_AUDIT_SERVICE: "http://audit:8080"
    depends_on:
      aws_cli:
        condition: service_started
      data_migration:
        condition: service_started
      keycloak:
        condition: service_started

  converter:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
    image: quay.io/ukhomeofficedigital/hocs-docs-converter:${DOCS_CONVERTER_TAG:-latest}
    ports:
      - 8084:8080
    networks:
      - hocs-network
    environment:
      SERVER_PORT: 8080

  documents:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      start_period: 2m
      timeout: 30s
      retries: 3
    image: quay.io/ukhomeofficedigital/hocs-docs:${DOCS_TAG:-latest}
    ports:
      - 8083:8080
    networks:
      - hocs-network
    environment:
      SPRING_PROFILES_ACTIVE: "development, local, postgres"
      SPRING_FLYWAY_SCHEMAS: "document"
      SERVER_PORT: 8080
      DOCS_QUEUE_NAME: "document-queue"
      DOCS_QUEUE_DLQ_NAME: "document-queue-dlq"
      CASE_QUEUE_NAME: "case-queue"
      CASE_QUEUE_DLQ_NAME: "case-queue-dlq"
      DOCS_TRUSTEDS3BUCKETNAME: "trusted-bucket"
      DOCS_UNTRUSTEDS3BUCKETNAME: "untrusted-bucket"
      HOCSCONVERTER_ROOT: "http4://converter:8080"
      CLAMAV_ROOT: "http4://clamav:8080"
      DB_HOST: "postgres"
      AWS_LOCAL_HOST: "localstack"
    depends_on:
      postgres:
        condition: service_healthy
      localstack:
        condition: service_healthy
      converter:
        condition: service_healthy
      aws_cli:
        condition: service_started

  templates:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      start_period: 1m
      timeout: 30s
      retries: 3
    image: quay.io/ukhomeofficedigital/hocs-templates:${TEMPLATES_TAG:-latest}
    ports:
      - 8090:8080
    networks:
      - hocs-network
    environment:
      SERVER_PORT: 8080
      HOCS_INFO_SERVICE: "http://info:8080"
      HOCS_AUDITSERVICE: "http://casework:8080"
      HOCS_SEARCH_SERVICE: "http://documents:8080"

  case_creator:
    image: quay.io/ukhomeofficedigital/hocs-case-creator:${CASE_CREATOR_TAG:-latest}
    ports:
      - 8092:8080
    networks:
      - hocs-network
    environment:
      SPRING_PROFILES_ACTIVE: "development, local"
      SERVER_PORT: 8080
      AWS_LOCAL_HOST: "localstack"
      AWS_SQS_REGION: "eu-west-2"
      AWS_ACCOUNT_ID: "1234"
      CASE_CREATOR_WORKFLOW_SERVICE: http://workflow:8080
      CASE_CREATOR_CASE_SERVICE: http://casework:8080
      CASE_CREATOR_BASICAUTH: "UNSET"
      CASE_CREATOR_UKVI_COMPLAINT_USER: "22ca514d-c205-47a0-9e38-68daee4c1299"
      CASE_CREATOR_UKVI_COMPLAINT_TEAM: "08e30ffc-2087-ff3a-b19b-343a88491347"
      CASE_CREATOR_UKVI_COMPLAINT_GROUP: "/COMP_CCH_zqxmzQ6iEkTRw"
      CASE_CREATOR_SQS_ACCESS_KEY: "1234"
      CASE_CREATOR_SQS_SECRET_KEY: "1234"
      CASE_CREATOR_UKVI_COMPLAINT_QUEUE_NAME: "ukvi-complaint-queue"
      CASE_CREATOR_UKVI_COMPLAINT_DL_QUEUE_NAME: "ukvi-complaint-queue-dlq"
      AUDIT_SNS_ACCESS_KEY: "1234"
      AUDIT_SNS_SECRET_KEY: "1234"
      AUDIT_SNS_TOPIC_NAME: "hocs-audit-topic"
      DOCUMENT_S3_ACCESS_KEY: "1234"
      DOCUMENT_S3_SECRET_KEY: "1234"
      DOCUMENT_S3_UNTRUSTED_BUCKET_NAME: "untrusted-bucket"
    depends_on:
      aws_cli:
        condition: service_healthy

networks:
  hocs-network:
